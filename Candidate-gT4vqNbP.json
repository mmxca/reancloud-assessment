{
   "Resources":{
      "HoffmanVPC":{
         "Type":"AWS::EC2::VPC",
         "Properties":{
            "CidrBlock":"10.0.0.0/16",
            "EnableDnsSupport":"true",
            "EnableDnsHostnames":"true",
            "InstanceTenancy":"default",
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanVPC"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ]
         }
      },
      "HoffmanSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Enable inbound SSH and HTTP/HTTPS from the world",
            "VpcId":{
               "Ref":"HoffmanVPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"22",
                  "ToPort":"22",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"80",
                  "ToPort":"80",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"443",
                  "ToPort":"443",
                  "CidrIp":"0.0.0.0/0"
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanSecurityGroup"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ]
         }
      },
      "HoffmanInternetGateway":{
         "Type":"AWS::EC2::InternetGateway",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanInternetGateway"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ]
         }
      },
      "HoffmanAttachGateway":{
         "Type":"AWS::EC2::VPCGatewayAttachment",
         "Properties":{
            "VpcId":{
               "Ref":"HoffmanVPC"
            },
            "InternetGatewayId":{
               "Ref":"HoffmanInternetGateway"
            }
         }
      },
      "HoffmanRoute":{
         "Type":"AWS::EC2::Route",
         "DependsOn":"HoffmanAttachGateway",
         "Properties":{
            "RouteTableId":{
               "Ref":"HoffmanRouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "GatewayId":{
               "Ref":"HoffmanInternetGateway"
            }
         }
      },
      "HoffmanRouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"HoffmanVPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanRouteTable"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ]
         }
      },
      "HoffmanSubnetRouteTableAssociation":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"HoffmanPublicSubnet"
            },
            "RouteTableId":{
               "Ref":"HoffmanRouteTable"
            }
         }
      },
      "HoffmanPublicSubnet":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"HoffmanVPC"
            },
            "CidrBlock":"10.0.0.0/24",
            "AvailabilityZone":"us-east-1a",
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanPublicSubnet"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ]
         }
      },
      "HoffmanPrivateSubnet":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"HoffmanVPC"
            },
            "CidrBlock":"10.0.1.0/24",
            "AvailabilityZone":"us-east-1a",
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanPrivateSubnet"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ]
         }
      },
      "HoffmanAnsibleInstance":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "AvailabilityZone":"us-east-1a",
            "ImageId":"ami-6869aa05",
            "InstanceType":"t2.micro",
            "KeyName":"Candidate-gT4vqNbP",
            "SubnetId":{
               "Ref":"HoffmanPrivateSubnet"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanAnsibleInstance"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ],
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash -xe\n",
                        "date 2>&1 > /tmp/install\n",
                        "yum update -y 2>&1 >> /tmp/install\n",
                        "yum update -y aws-cfn-bootstrap 2>&1 >> /tmp/install\n",
                        "yum install -y epel-release 2>&1 >> /tmp/install\n",
                        "yum-config-manager --enable epel 2>&1 >> /tmp/install\n",
                        "/opt/aws/bin/cfn-init -v ",
                        " --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        " --resource HoffmanAnsibleInstance ",
                        " --configsets ansible_install ",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        " 2>&1 >> /tmp/install\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        " --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        " --resource HoffmanAnsibleInstance ",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        " 2>&1 >> /tmp/install\n",
                        "date 2>&1 >> /tmp/install\n"
                     ]
                  ]
               }
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "ansible_install":[
                     "install_cfn",
                     "install_git",
                     "install_ansible"
                  ]
               },
               "install_cfn":{
                  "files":{
                     "/etc/cfn/cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                                 "action=/opt/aws/bin/cfn-init -v ",
                                 " --stack ",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 " --resource HoffmanAnsibleInstance ",
                                 " --configsets ansible_install ",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "install_git":{
                  "packages":{
                     "yum":{
                        "git":[

                        ]
                     }
                  }
               },
               "install_ansible":{
                  "packages":{
                     "yum":{
                        "ansible":[

                        ]
                     }
                  }
               }
            }
         }
      },
      "HoffmanWordpressInstance":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "AvailabilityZone":"us-east-1a",
            "ImageId":"ami-6869aa05",
            "InstanceType":"t2.micro",
            "KeyName":"Candidate-gT4vqNbP",
            "NetworkInterfaces":[
               {
                  "SubnetId":{
                     "Ref":"HoffmanPublicSubnet"
                  },
                  "DeviceIndex":"0",
                  "AssociatePublicIpAddress":"true",
                  "GroupSet":[
                     {
                        "Ref":"HoffmanSecurityGroup"
                     }
                  ]
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanWordpressInstance"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ],
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash -xe\n",
                        "date 2>&1 > /tmp/install\n",
                        "yum update -y 2>&1 >> /tmp/install\n",
                        "yum update -y aws-cfn-bootstrap 2>&1 >> /tmp/install\n",
                        "/opt/aws/bin/cfn-init -v ",
                        " --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        " --resource HoffmanWordpressInstance ",
                        " --configsets wordpress_install ",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        " 2>&1 >> /tmp/install\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        " --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        " --resource HoffmanWordpressInstance ",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        " 2>&1 >> /tmp/install\n",
                        "date 2>&1 >> /tmp/install\n"
                     ]
                  ]
               }
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "wordpress_install":[
                     "install_cfn",
                     "install_wordpress_prereqs"
                  ]
               },
               "install_cfn":{
                  "files":{
                     "/etc/cfn/cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                                 "action=/opt/aws/bin/cfn-init -v ",
                                 " --stack ",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 " --resource HoffmanWordpressInstance ",
                                 " --configsets wordpress_install ",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "install_wordpress_prereqs":{
                  "packages":{
                     "yum":{
                        "php":[

                        ],
                        "php-mysql":[

                        ],
                        "mysql":[

                        ],
                        "mysql-server":[

                        ],
                        "mysql-devel":[

                        ],
                        "mysql-libs":[

                        ],
                        "httpd":[

                        ]
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "mysql":{
                           "enabled":"true",
                           "ensureRunning":"true"
                        },
                        "httpd":{
                           "enabled":"true",
                           "ensureRunning":"true"
                        }
                     }
                  }
               }
            }
         }
      }
   }
}
