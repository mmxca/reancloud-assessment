{
   "Description":"DevOps Assignment 1. Objective: Use CM tools such as Puppet, Ansible, or Chef to automate the installation of basic Drupal or WordPress. Setup a sample site. Automate the solution using Cloudformation template. Deliverable: A cloudformation template that accepts user inputs as parameters where applicable ( for example, Admin password). This template should setup VPC, create subnets, launch a CM instance, pull the necessary code (modules, classes, recipes etc) from a GIT repo (or S3), and configure the web instance for basic Drupal or Wordpress setup.",
   "Parameters":{
      "EC2KeyPair":{
         "Type":"AWS::EC2::KeyPair::KeyName",
         "Description":"Name of an existing EC2 KeyPair",
         "ConstraintDescription":"Please provide name of an existing EC2 KeyPair."
      },
      "MysqlDatabase":{
         "Type":"String",
         "Default":"wordpress",
         "Description":"The name of the Database to use"
      },
      "MysqlDatabasePassword":{
         "Type":"String",
         "Default":"w0rdpr355",
         "Description":"The password for the database"
      }
   },
   "Resources":{
      "HoffmanVPC":{
         "Type":"AWS::EC2::VPC",
         "Properties":{
            "CidrBlock":"10.0.0.0/16",
            "EnableDnsSupport":"true",
            "EnableDnsHostnames":"true",
            "InstanceTenancy":"default",
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanVPC"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ]
         }
      },
      "HoffmanSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Enable inbound SSH and HTTP/HTTPS from the world",
            "VpcId":{
               "Ref":"HoffmanVPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"22",
                  "ToPort":"22",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"80",
                  "ToPort":"80",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"443",
                  "ToPort":"443",
                  "CidrIp":"0.0.0.0/0"
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanSecurityGroup"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ]
         }
      },
      "HoffmanInternetGateway":{
         "Type":"AWS::EC2::InternetGateway"
      },
      "HoffmanInternetGatewayAttachment":{
         "Type":"AWS::EC2::VPCGatewayAttachment",
         "Properties":{
            "InternetGatewayId":{
               "Ref":"HoffmanInternetGateway"
            },
            "VpcId":{
               "Ref":"HoffmanVPC"
            }
         }
      },
      "HoffmanElasticIP":{
         "Type":"AWS::EC2::EIP",
         "DependsOn":"HoffmanInternetGatewayAttachment",
         "Properties":{
            "Domain":"vpc"
         }
      },
      "HoffmanPrivateNatSubnet":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":"us-east-1a",
            "CidrBlock":"10.0.0.0/24",
            "VpcId":{
               "Ref":"HoffmanVPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanPrivateNatSubnet"
               }
            ]
         }
      },
      "HoffmanNatGateway":{
         "Type":"AWS::EC2::NatGateway",
         "Properties":{
            "SubnetId":{
               "Ref":"HoffmanPrivateNatSubnet"
            },
            "AllocationId":{
               "Fn::GetAtt":[
                  "HoffmanElasticIP",
                  "AllocationId"
               ]
            }
         }
      },
      "HoffmanPrivateSubnet":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":"us-east-1a",
            "CidrBlock":"10.0.1.0/24",
            "VpcId":{
               "Ref":"HoffmanVPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanPrivateSubnet"
               }
            ]
         }
      },
      "HoffmanPublicSubnetsRouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"HoffmanVPC"
            }
         }
      },
      "HoffmanPrivateSubnetsRouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"HoffmanVPC"
            }
         }
      },
      "HoffmanInternetRoute":{
         "Type":"AWS::EC2::Route",
         "DependsOn":"HoffmanInternetGateway",
         "Properties":{
            "RouteTableId":{
               "Ref":"HoffmanPublicSubnetsRouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "GatewayId":{
               "Ref":"HoffmanInternetGateway"
            }
         }
      },
      "HoffmanNatRoute":{
         "Type":"AWS::EC2::Route",
         "DependsOn":[
            "HoffmanAssociateRouteTableWithNatSubnet"
         ],
         "Properties":{
            "RouteTableId":{
               "Ref":"HoffmanPrivateSubnetsRouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "NatGatewayId":{
               "Ref":"HoffmanNatGateway"
            }
         }
      },
      "HoffmanAssociateRouteTableWithNatSubnet":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "RouteTableId":{
               "Ref":"HoffmanPublicSubnetsRouteTable"
            },
            "SubnetId":{
               "Ref":"HoffmanPrivateNatSubnet"
            }
         }
      },
      "HoffmanAssociateRouteTableWithPrivateSubnet":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "RouteTableId":{
               "Ref":"HoffmanPrivateSubnetsRouteTable"
            },
            "SubnetId":{
               "Ref":"HoffmanPrivateSubnet"
            }
         }
      },
      "HoffmanAnsibleInstance":{
         "Type":"AWS::EC2::Instance",
         "DependsOn":[
            "HoffmanWordpressInstance",
            "HoffmanNatGateway",
            "HoffmanNatRoute"
         ],
         "Properties":{
            "AvailabilityZone":"us-east-1a",
            "ImageId":"ami-6869aa05",
            "InstanceType":"t2.micro",
            "KeyName":{
               "Ref":"EC2KeyPair"
            },
            "NetworkInterfaces":[
               {
                  "SubnetId":{
                     "Ref":"HoffmanPrivateSubnet"
                  },
                  "DeviceIndex":"0",
                  "AssociatePublicIpAddress":"false",
                  "GroupSet":[
                     {
                        "Ref":"HoffmanSecurityGroup"
                     }
                  ]
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanAnsibleInstance"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ],
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash -xe\n",
                        "date 2>&1 > /tmp/install\n",
                        "chmod 666 /tmp/install\n",
                        "yum update -y 2>&1 >> /tmp/install\n",
                        "yum update -y aws-cfn-bootstrap 2>&1 >> /tmp/install\n",
                        "yum install -y epel-release 2>&1 >> /tmp/install\n",
                        "yum-config-manager --enable epel 2>&1 >> /tmp/install\n",
                        "yum install -y git ansible 2>&1 >> /tmp/install\n",
                        "/opt/aws/bin/cfn-init -v ",
                        " --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        " --resource HoffmanAnsibleInstance ",
                        " --configsets wpress_install ",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        " 2>&1 >> /tmp/install\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        " --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        " --resource HoffmanAnsibleInstance ",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        " 2>&1 >> /tmp/install\n",
                        "date 2>&1 >> /tmp/install\n"
                     ]
                  ]
               }
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "wpress_install":[
                     "install_cfn",
                     "install_wpress"
                  ]
               },
               "install_cfn":{
                  "files":{
                     "/etc/cfn/cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                                 "action=/opt/aws/bin/cfn-init -v ",
                                 " --stack ",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 " --resource HoffmanAnsibleInstance ",
                                 " --configsets wpress_install ",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "install_wpress":{
                  "commands":{
                     "cmd_00_start":{
                        "command":"date >> /tmp/install"
                     },
                     "cmd_01_clone":{
                        "command":"/usr/bin/git clone https://github.com/mmxca/reancloud-assessment /opt/reancloud-assessment"
                     },
                     "cmd_02_keyscan":{
                        "command":{
                           "Fn::Join":[
                              " ",
                              [
                                 "ssh-keyscan -t rsa -H ",
                                 {
                                    "Fn::GetAtt":[
                                       "HoffmanWordpressInstance",
                                       "PrivateIp"
                                    ]
                                 },
                                 " > /root/.ssh/known_hosts"
                              ]
                           ]
                        }
                     },
                     "cmd_03_get_priv_key":{
                        "command":"/usr/bin/curl -o /root/.ssh/id_rsa https://raw.githubusercontent.com/mmxca/reancloud-assessment/master/cloudformation/id_rsa"
                     },
                     "cmd_04_chmod_priv_key":{
                        "command":"/bin/chmod 400 /root/.ssh/id_rsa"
                     },
                     "cmd_05_cp_priv_key":{
                        "command":"/bin/cp /root/.ssh/id_rsa /home/ec2-user/.ssh/"
                     },
                     "cmd_06_cp_known_hosts":{
                        "command":"/bin/cp /root/.ssh/known_hosts /home/ec2-user/.ssh/"
                     },
                     "cmd_07_chown_ssh":{
                        "command":"/bin/chown -R ec2-user:ec2-user /home/ec2-user/.ssh/"
                     },
                     "cmd_08_edit_ansible_hosts":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sed -i 's/REMOTE_IP_ADDRESS/",
                                 {
                                    "Fn::GetAtt":[
                                       "HoffmanWordpressInstance",
                                       "PrivateIp"
                                    ]
                                 },
                                 "/' hosts"
                              ]
                           ]
                        },
                        "cwd":"/opt/reancloud-assessment/ansible"
                     },
                     "cmd_09_set_ansible_database_name":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sed -i 's/###DATABASE_NAME###/",
                                 {
                                    "Ref":"MysqlDatabase"
                                 },
                                 "/' wpconfig.cfg"
                              ]
                           ]
                        },
                        "cwd":"/opt/reancloud-assessment/ansible/conf"
                     },
                     "cmd_10_set_ansible_database_user":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sed -i 's/###DATABASE_USER###/root/' wpconfig.cfg"
                              ]
                           ]
                        },
                        "cwd":"/opt/reancloud-assessment/ansible/conf"
                     },
                     "cmd_11_set_ansible_mysql_root_password":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sed -i 's/###DATABASE_PASSWORD###/",
                                 {
                                    "Ref":"MysqlDatabasePassword"
                                 },
                                 "/' wpconfig.cfg"
                              ]
                           ]
                        },
                        "cwd":"/opt/reancloud-assessment/ansible/conf"
                     },
                     "cmd_12_set_ansible_mysql_root_password":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sed -i 's/###MYSQL_ROOT_PASSWORD###/",
                                 {
                                    "Ref":"MysqlDatabasePassword"
                                 },
                                 "/' mysql.cfg"
                              ]
                           ]
                        },
                        "cwd":"/opt/reancloud-assessment/ansible/conf"
                     },
                     "cmd_13_execute_ansible":{
                        "command":"runuser -l ec2-user -c 'ansible-playbook -i /opt/reancloud-assessment/ansible/hosts /opt/reancloud-assessment/ansible/playbooks/deploy-wordpress.yml'  2>&1 >> /tmp/install",
                        "cwd":"/opt/reancloud-assessment/ansible"
                     },
                     "cmd_99_end":{
                        "command":"date >> /tmp/install"
                     }
                  }
               }
            }
         }
      },
      "HoffmanWordpressInstance":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "AvailabilityZone":"us-east-1a",
            "ImageId":"ami-6869aa05",
            "InstanceType":"t2.micro",
            "KeyName":{
               "Ref":"EC2KeyPair"
            },
            "NetworkInterfaces":[
               {
                  "SubnetId":{
                     "Ref":"HoffmanPrivateNatSubnet"
                  },
                  "DeviceIndex":"0",
                  "AssociatePublicIpAddress":"true",
                  "GroupSet":[
                     {
                        "Ref":"HoffmanSecurityGroup"
                     }
                  ]
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"HoffmanWordpressInstance"
               },
               {
                  "Key":"Candidate",
                  "Value":"David Hoffman"
               }
            ],
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash -xe\n",
                        "date 2>&1 > /tmp/install\n",
                        "curl -o /home/ec2-user/.ssh/id_rsa https://raw.githubusercontent.com/mmxca/reancloud-assessment/master/cloudformation/id_rsa\n",
                        "chown ec2-user:ec2-user /home/ec2-user/.ssh/id_rsa\n",
                        "chmod 400 /home/ec2-user/.ssh/id_rsa\n",
                        "yum update -y 2>&1 >> /tmp/install\n",
                        "yum update -y aws-cfn-bootstrap 2>&1 >> /tmp/install\n",
                        "/opt/aws/bin/cfn-init -v ",
                        " --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        " --resource HoffmanWordpressInstance ",
                        " --configsets cfn_install ",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        " 2>&1 >> /tmp/install\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        " --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        " --resource HoffmanWordpressInstance ",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        " 2>&1 >> /tmp/install\n",
                        "date 2>&1 >> /tmp/install\n"
                     ]
                  ]
               }
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "cfn_install":[
                     "install_cfn"
                  ]
               },
               "install_cfn":{
                  "files":{
                     "/etc/cfn/cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                                 "action=/opt/aws/bin/cfn-init -v ",
                                 " --stack ",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 " --resource HoffmanWordpressInstance ",
                                 " --configsets cfn_install ",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               }
            }
         }
      }
   },
   "Outputs":{
      "WorpressURL":{
         "Value":{
            "Fn::Join":[
               "",
               [
                  "http://",
                  {
                     "Fn::GetAtt":[
                        "HoffmanWordpressInstance",
                        "PublicDnsName"
                     ]
                  },
                  "/"
               ]
            ]
         },
         "Description":"URL to access WordPress Website"
      }
   }
}
